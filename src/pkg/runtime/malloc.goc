// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// See malloc.h for overview.
//
// TODO(rsc): double-check stats.

package runtime
#include "runtime.h"
#include "arch_amd64.h"
#include "malloc.h"
#include "type.h"
#include "typekind.h"
#include "race.h"
#include "stack.h"
#include "../../cmd/ld/textflag.h"

// Mark mheap as 'no pointers', 
// it does not contain interesting pointers but occupies ~45K.
#pragma dataflag NOPTR
MHeap runtime·mheap;

int32	runtime·checking;

// defined in zruntime_def_$GOOS_$GOARCH.go
extern MStats mstats;

extern volatile intgo runtime·MemProfileRate;

// 为一个 object 分配至少 size 大小的空间, 这是开发者程序中声明变量时进行的操作.
//
// 申请规则如下
// 1. 小对象由每个线程(M 对象)的 cache 中的空闲列表(mcache)中分配.
// 2. 大对象(大于32k)直接从堆中分配.
// 3. 如果分配的块之后需要调用 runtime·free() 手动释放(即不由GC操作来回收空间), 
// 则 typ 参数必须指定为0(此时 flag 参数一般为 FlagNoInvokeGC).
// 
// param size: 申请分配的空间大小
// param flag: 目标空间的标记, 如 FlagNoInvokeGC 表示该空间不需要 GC 回收.
//
// caller:
// 	1. runtime·malloc()
// 		1. runtime·mallocinit() 初始化内存分配器完成后, 调用此函数看看效果.
// 			从代码分析来看, 此时内存分配器里所有的区域都还没有实际分配空间.
// 	2. runtime·new()
//
// 此函数的调用者很多, 创建P, G对象, chan, string对象, 还有栈帧对象等, 
// 都可以调用此函数创建.
//
// Allocate an object of at least size bytes.
// Small objects are allocated from the per-thread cache's free lists.
// Large objects (> 32 kB) are allocated straight from the heap.
// If the block will be freed with runtime·free(), typ must be 0.
void*
runtime·mallocgc(uintptr size, uintptr typ, uint32 flag)
{
	int32 sizeclass;
	intgo rate;
	MCache *c;
	MCacheList *l;
	uintptr npages;
	MSpan *s;
	// 表示为目标对象分配的小块空间的地址
	MLink *v;

	if(size == 0) {
		// All 0-length allocations use this pointer.
		// The language does not require the allocations to have distinct values.
		// 所有长度为0的分配操作都返回这个指针(...是不是nil对象?)
		// go 不要求 nil 对象有不同的值.
		return &runtime·zerobase;
	}
	// m 在 runtime.h 中声明, 也是全局变量, m 是 M 类型的列表对象.
	if(m->mallocing) {
		runtime·throw("malloc/free - deadlock");
	} 

	// Disable preemption during settype_flush.
	// We can not use m->mallocing for this, because settype_flush calls mallocgc.
	m->locks++;
	m->mallocing = 1; // 加锁

	if(DebugTypeAtBlockEnd) {
		size += sizeof(uintptr);
	}

	c = m->mcache;
	// 小对象从 mcache 列表中分配.
	if(size <= MaxSmallSize) {
		// Inlined version of SizeToClass().
		// 下面的语句同样实现了 SizeToClass() 的功能, 相当于内联版本.
		if(size <= 1024-8) {
			sizeclass = runtime·size_to_class8[(size+7)>>3];
		} 
		else {
			sizeclass = runtime·size_to_class128[(size-1024+127) >> 7];
		}

		// 这里的 size 与前面的 size 大小不一定相同, 因为要分配目标等级规定的空间, 可能会有空间浪费.
		size = runtime·class_to_size[sizeclass];
		// 先从当前线程的 mcache 中分配
		l = &c->list[sizeclass];
		// 如果 list 中已经没有成员(分配一个成员就会将其从 list 中移除), 则从堆中的 central 空间中拿一些过来.
		if(l->list == nil) {
			runtime·MCache_Refill(c, sizeclass);
		} 

		// 从 mcache 的 span 链表分配小对象, 相当于直接从链表头移除了一个成员.
		v = l->list;
		l->list = v->next;
		l->nlist--;
		if(!(flag & FlagNoZero)) {
			v->next = nil;
			// 目标块地址v的第2个 字段 为空, 就表示整个块已清零, 不需要调用 runtime·memclr()
			// ...什么原理???
			//
			// block is zeroed iff second word is zero ...
			if(size > sizeof(uintptr) && ((uintptr*)v)[1] != 0){
				runtime·memclr((byte*)v, size);
			}
		}
		// 记录已经分配的大小.
		c->local_cachealloc += size;
	} else {
		// TODO(rsc): Report tracebacks for very large allocations.
		// 大对象(超过32k)直接从堆上分配

		// npages 表示目标 size 的空间需要多少页
		npages = size >> PageShift;
		// 这里应该是为 size 大小的空间计算出 npages 后, 发现未被整除, 所以多分配了一页.
		if((size & PageMask) != 0) {
			npages++;
		}

		s = runtime·MHeap_Alloc(&runtime·mheap, npages, 0, 1, !(flag & FlagNoZero));

		if(s == nil) {
			runtime·throw("out of memory");
		} 

		s->limit = (byte*)(s->start<<PageShift) + size;
		size = npages<<PageShift;
		v = (void*)(s->start << PageShift);

		// setup for mark sweep
		// 为之后的标记清除做准备(应该是记录下分配空间的位置, 方便GC时的索引)
		runtime·markspan(v, 0, 0, true);
	}

	// 如果 flag 不包括 FlagNoGC 标识位, 说明该空间需要被GC, 所以将其标记.
	if(!(flag & FlagNoGC)){
		// 设置此内存块 为 noscan 类型(即不包含指针, GC时无需从此处开始寻找释放对象).
		runtime·markallocated(v, size, (flag&FlagNoScan) != 0);
	}

	if(DebugTypeAtBlockEnd){
		*(uintptr*)((uintptr)v+size-sizeof(uintptr)) = typ;
	}

	// TODO: save type even if FlagNoScan? 
	// Potentially expensive but might help heap profiling/tracing.
	if(UseSpanType && !(flag & FlagNoScan) && typ != 0) {
		uintptr *buf, i;

		buf = m->settype_buf;
		i = m->settype_bufsize;
		buf[i++] = (uintptr)v;
		buf[i++] = typ;
		m->settype_bufsize = i;
	}

	m->mallocing = 0; // 解锁
	if(UseSpanType && !(flag & FlagNoScan) && typ != 0 && m->settype_bufsize == nelem(m->settype_buf)) {
		runtime·settype_flush(m);
	}
	m->locks--;
	// restore the preemption request in case we've cleared it in newstack
	if(m->locks == 0 && g->preempt){
		g->stackguard0 = StackPreempt;
	}

	if(!(flag & FlagNoProfiling) && (rate = runtime·MemProfileRate) > 0) {
		if(size >= rate) {
			goto profile;
		} 
		if(m->mcache->next_sample > size) {
			m->mcache->next_sample -= size;
		} 
		else {
			// pick next profile time
			// If you change this, also change allocmcache.
			// make 2*rate not overflow
			if(rate > 0x3fffffff) {
				rate = 0x3fffffff;
			} 
			m->mcache->next_sample = runtime·fastrand1() % (2*rate);
		profile:
			runtime·setblockspecial(v, true);
			runtime·MProf_Malloc(v, size);
		}
	}

	// 如果 flag 不包含 FlagNoInvokeGC, 说明此次分配会给GC增加压力(因为此次分配需要GC来回收)
	// 而此时如果 next_gc 时间到了, 就手动触发gc()
	if(!(flag & FlagNoInvokeGC) && mstats.heap_alloc >= mstats.next_gc) {
		runtime·gc(0);
	}

	if(raceenabled) {
		runtime·racemalloc(v, size);
	} 
	return v;
}

// 调用 runtime·mallocgc(), 并使用 FlagNoInvokeGC 标记, 
// 通过此函数分配的空间都是由调用者再通过 runtime·free() 释放的, 而不是通过GC来回收.
//
// 此函数的主调函数都是 runtime 级别, 开发者声明变量申请空间用的是 runtime·new() 方法.
//
// caller:
// 	1. runtime·mallocinit() 初始化内存分配器完成后, 调用此方法试用.
// 	2. src/pkg/runtime/proc.c -> runtime·schedinit() (初始化内存分配器与 m0 后)为 P 链表申请空间.
void*
runtime·malloc(uintptr size)
{
	return runtime·mallocgc(size, 0, FlagNoInvokeGC);
}

// 释放指向地址 v 的对象
//
// Free the object whose base pointer is v.
void
runtime·free(void *v)
{
	int32 sizeclass;
	MSpan *s;
	MCache *c;
	uint32 prof;
	uintptr size;

	if(v == nil) {
		return;
	} 
	
	// If you change this also change mgc0.c:/^sweep,
	// which has a copy of the guts of free.

	if(m->mallocing) {
		runtime·throw("malloc/free - deadlock");
	} 
	m->mallocing = 1;

	if(!runtime·mlookup(v, nil, nil, &s)) {
		runtime·printf("free %p: not an allocated block\n", v);
		runtime·throw("free runtime·mlookup");
	}
	prof = runtime·blockspecial(v);

	if(raceenabled) {
		runtime·racefree(v);
	}

	// Find size class for v.
	sizeclass = s->sizeclass;
	c = m->mcache;
	if(sizeclass == 0) {
		// Large object.
		size = s->npages<<PageShift;
		// mark as "needs to be zeroed"
		*(uintptr*)(s->start<<PageShift) = (uintptr)0xfeedfeedfeedfeedll;
		// Must mark v freed before calling unmarkspan and MHeap_Free:
		// they might coalesce v into other spans and change the bitmap further.
		runtime·markfreed(v, size);
		runtime·unmarkspan(v, 1<<PageShift);
		runtime·MHeap_Free(&runtime·mheap, s, 1);
		c->local_nlargefree++;
		c->local_largefree += size;
	} else {
		// Small object.
		size = runtime·class_to_size[sizeclass];
		// mark as "needs to be zeroed"
		if(size > sizeof(uintptr)) {
			((uintptr*)v)[1] = (uintptr)0xfeedfeedfeedfeedll;
		} 
		// Must mark v freed before calling MCache_Free:
		// it might coalesce v and other blocks into a bigger span
		// and change the bitmap further.
		runtime·markfreed(v, size);
		c->local_nsmallfree[sizeclass]++;
		runtime·MCache_Free(c, v, sizeclass, size);
	}
	if(prof) {
		runtime·MProf_Free(v, size);
	} 
	m->mallocing = 0;
}

int32
runtime·mlookup(void *v, byte **base, uintptr *size, MSpan **sp)
{
	uintptr n, i;
	byte *p;
	MSpan *s;

	m->mcache->local_nlookup++;
	if (sizeof(void*) == 4 && m->mcache->local_nlookup >= (1<<30)) {
		// purge cache stats to prevent overflow
		runtime·lock(&runtime·mheap);
		runtime·purgecachedstats(m->mcache);
		runtime·unlock(&runtime·mheap);
	}

	s = runtime·MHeap_LookupMaybe(&runtime·mheap, v);
	
	if(sp) {
	 	*sp = s;
	}

	if(s == nil) {
		runtime·checkfreed(v, 1);
	
		if(base) {
			*base = nil;
		} 
	
		if(size) {
			*size = 0;
		} 
	
		return 0;
	}

	p = (byte*)((uintptr)s->start<<PageShift);
	if(s->sizeclass == 0) {
		// Large object.

		if(base) {
			*base = p;
		} 

		if(size) {
			*size = s->npages<<PageShift;
		} 
		
		return 1;
	}

	n = s->elemsize;
	if(base) {
		i = ((byte*)v - p)/n;
		*base = p + i*n;
	}
	
	if(size) {
		*size = n;
	} 

	return 1;
}

// 为 MHeap->cachealloc 对象分配空间, 并返回该块空间的地址.
//
// 不过这个分配好像很粗略, 只是分配了 chrunk 空间, 没有为实际存储对象的 list 列表分配空间...
// 且返回的是 cachealloc->list 的地址, 这是一个 MCache 数组, 不过此时为 nil.
//
// caller:
// 	1. runtime·mallocinit() 初始化内存分配器时被调用, 为 m0 创建 mcache 成员;
// 	2. src/pkg/runtime/proc.c -> procresize() 对 p 的数量进行调整时, 为新创建的 p 对象分配 mcache;
MCache*
runtime·allocmcache(void)
{
	intgo rate;
	MCache *c;

	// 典型的申请空间, 然后清零的操作.
	runtime·lock(&runtime·mheap);
	c = runtime·FixAlloc_Alloc(&runtime·mheap.cachealloc);
	runtime·unlock(&runtime·mheap);
	runtime·memclr((byte*)c, sizeof(*c));

	// Set first allocation sample size.
	rate = runtime·MemProfileRate;
	// make 2*rate not overflow
	if(rate > 0x3fffffff) {
		rate = 0x3fffffff;
	} 
	if(rate != 0) {
		c->next_sample = runtime·fastrand1() % (2*rate);
	} 

	return c;
}

// caller:
// 	1. src/pkg/runtime/proc.c -> procresize() 
//     对 p 的数量进行调整时, 将多余的 p 对象的 mcache 空间回收;
void
runtime·freemcache(MCache *c)
{
	runtime·MCache_ReleaseAll(c);
	runtime·lock(&runtime·mheap);
	runtime·purgecachedstats(c);
	runtime·FixAlloc_Free(&runtime·mheap.cachealloc, c);
	runtime·unlock(&runtime·mheap);
}

void
runtime·purgecachedstats(MCache *c)
{
	MHeap *h;
	int32 i;

	// Protected by either heap or GC lock.
	h = &runtime·mheap;
	mstats.heap_alloc += c->local_cachealloc;
	c->local_cachealloc = 0;
	mstats.nlookup += c->local_nlookup;
	c->local_nlookup = 0;
	h->largefree += c->local_largefree;
	c->local_largefree = 0;
	h->nlargefree += c->local_nlargefree;
	c->local_nlargefree = 0;
	for(i=0; i<nelem(c->local_nsmallfree); i++) {
		h->nsmallfree[i] += c->local_nsmallfree[i];
		c->local_nsmallfree[i] = 0;
	}
}

uintptr runtime·sizeof_C_MStats = sizeof(MStats);

#define MaxArena32 (2U<<30)

// 初始化内存分配器
//
// caller: 
// 	1. src/pkg/runtime/proc.c -> runtime·schedinit()
void
runtime·mallocinit(void)
{
	// 虚拟内存的起始地址, 是计算出来的, 并通过 runtime·SysReserve() 申请.
	byte *p;
	uintptr arena_size, bitmap_size, spans_size;
	extern byte end[];
	byte *want;
	uintptr limit;
	uint64 i;

	p = nil;
	arena_size = 0;
	bitmap_size = 0;
	spans_size = 0;

	// for 64-bit build
	USED(p);
	USED(arena_size);
	USED(bitmap_size);
	USED(spans_size);

	runtime·InitSizes();

	// limit = runtime·memlimit();
	// See https://code.google.com/p/go/issues/detail?id=5049
	// TODO(rsc): Fix after 1.1.
	limit = 0;

	// Set up the allocation arena, a contiguous area of memory where
	// allocated data will be found. 
	// The arena begins with a bitmap large enough to hold 4 bits per allocated word.
	//
	// if 条件判断是根据指针 size 大小, 确认 OS 是否为 64 位的.
	if(sizeof(void*) == 8 && (limit == 0 || limit > (1<<30))) {
		// On a 64-bit machine, allocate from a single contiguous reservation.
		// 128 GB (MaxMem) should be big enough for now.
		//
		// The code will work with the reservation at any address, 
		// but ask SysReserve to use 0x0000XXc000000000 if possible (XX=00...7f).
		// Allocating a 128 GB region takes away 37 bits,
		// and the amd64 doesn't let us choose the top 17 bits,
		// so that leaves the 11 bits in the middle of 0x00c0 for us to choose. 
		// Choosing 0x00c0 means
		// that the valid memory addresses will begin 0x00c0, 0x00c1, ..., 0x00df.
		// In little-endian, that's c0 00, c1 00, ..., df 00. None of those are valid
		// UTF-8 sequences, and they are otherwise as far away from 
		// ff (likely a common byte) as possible. 
		// If that fails, we try other 0xXXc0 addresses. 
		// An earlier attempt to use 0x11f8 caused out of memory errors
		// on OS X during thread allocations. 
		// 0x00c0 causes conflicts with AddressSanitizer 
		// which reserves all memory up to 0x0100.
		// These choices are both for debuggability and to reduce the
		// odds of the conservative garbage collector not collecting memory
		// because some non-pointer block of memory had a bit pattern
		// that matched a memory address.
		//
		// Actually we reserve 136 GB (because the bitmap ends up being 8 GB)
		// but it hardly matters: e0 00 is not valid UTF-8 either.
		//
		// If this fails we fall back to the 32 bit memory mechanism
		//
		// 在 64-bit 系统中，实际保留地址 256MB spans + 8GB bitmap + 128GB arena
		arena_size = MaxMem;
		bitmap_size = arena_size / (sizeof(void*)*8/4);
		spans_size = arena_size / PageSize * sizeof(runtime·mheap.spans[0]);
		spans_size = ROUND(spans_size, PageSize);
		for(i = 0; i <= 0x7f; i++) {
			p = (void*)(i<<40 | 0x00c0ULL<<32);
			// 保留虚拟地址范围, 并未实际分配内存.
			p = runtime·SysReserve(p, bitmap_size + spans_size + arena_size);
			if(p != nil) break;
		}
	} // 64 位 OS 赋值结束

	// 如果 p == nil, 说明没有进到上面的 if case 中, 则将 OS 视作 32 位.
	// 这部分可以直接略过...
	if (p == nil) {
		// On a 32-bit machine, we can't typically get away
		// with a giant virtual address space reservation.
		// Instead we map the memory information bitmap
		// immediately after the data segment, large enough
		// to handle another 2GB of mappings (256 MB),
		// along with a reservation for another 512 MB of memory.
		// When that gets used up, we'll start asking the kernel
		// for any memory anywhere and hope it's in the 2GB
		// following the bitmap (presumably the executable begins
		// near the bottom of memory, so we'll have to use up
		// most of memory before the kernel resorts to giving out
		// memory before the beginning of the text segment).
		//
		// Alternatively we could reserve 512 MB bitmap, enough
		// for 4GB of mappings, and then accept any memory the
		// kernel threw at us, but normally that's a waste of 512 MB
		// of address space, which is probably too much in a 32-bit world.
		bitmap_size = MaxArena32 / (sizeof(void*)*8/4);
		arena_size = 512<<20;
		spans_size = MaxArena32 / PageSize * sizeof(runtime·mheap.spans[0]);
		if(limit > 0 && arena_size+bitmap_size+spans_size > limit) {
			bitmap_size = (limit / 9) & ~((1<<PageShift) - 1);
			arena_size = bitmap_size * 8;
			spans_size = arena_size / PageSize * sizeof(runtime·mheap.spans[0]);
		}
		spans_size = ROUND(spans_size, PageSize);

		// SysReserve treats the address we ask for, end, as a hint,
		// not as an absolute requirement.  If we ask for the end
		// of the data segment but the operating system requires
		// a little more space before we can start allocating, it will
		// give out a slightly higher pointer.  Except QEMU, which
		// is buggy, as usual: it won't adjust the pointer upward.
		// So adjust it upward a little bit ourselves: 1/4 MB to get
		// away from the running binary image and then round up
		// to a MB boundary.
		want = (byte*)ROUND((uintptr)end + (1<<18), 1<<20);
		p = runtime·SysReserve(want, bitmap_size + spans_size + arena_size);
		if(p == nil)
			runtime·throw("runtime: cannot reserve arena virtual address space");
		if((uintptr)p & (((uintptr)1<<PageShift)-1))
			runtime·printf(
				"runtime: SysReserve returned unaligned address %p; asked for %p",
				p, bitmap_size+spans_size+arena_size
			);
	} // 32 位 OS 赋值结束

	if((uintptr)p & (((uintptr)1<<PageShift)-1)){
		runtime·throw("runtime: SysReserve returned unaligned address");
	}

	//                        arena_used(初始arena的使用为0, 所以其地址与 arena_start 在同一位置)
	// span     bitmap        arena_start                 arena_end
	//   ↓        ↓                ↓                          ↓
	//   +--------|----------------+--------------------------+
	//   |  span  |     bitmap     |           arena          |
	//   +--------|----------------+--------------------------+
	//
	// 保留区域头部存储 spans、bitmap. 仅设置地址, 并没有分配内存
	// runtime·mheap 是一个全局变量, 这里规定span, bitmap和arena3个区域的地址划分.
	runtime·mheap.spans = (MSpan**)p;
	runtime·mheap.bitmap = p + spans_size;
	runtime·mheap.arena_start = p + spans_size + bitmap_size;
	// 初始arena的使用为0, 所以其地址与 arena_start 在同一位置
	runtime·mheap.arena_used = runtime·mheap.arena_start; 
	runtime·mheap.arena_end = runtime·mheap.arena_start + arena_size;

	// Initialize the rest of the allocator.
	runtime·MHeap_Init(&runtime·mheap);

	// 为当前线程创建 cache(mcache 存在于每个线程中, 并不是在堆上, 用于小对象无锁分配空间)
	// m->mcache 为 MCache 数组指针, 不过这里返回的是 nil, 里面还是空的.
	m->mcache = runtime·allocmcache();

	// 貌似直到这里, mheap 的 free 列表中各个 span 链表都还是空的, 并未分配过空间啊...
	// See if it works.
	// ...先分配一个1byte的对象(参数1即对象size为1), 再回收
	runtime·free(runtime·malloc(1));
}

void*
runtime·MHeap_SysAlloc(MHeap *h, uintptr n)
{
	byte *p;

	if(n > h->arena_end - h->arena_used) {
		// We are in 32-bit mode, maybe we didn't use all possible address space yet.
		// Reserve some more space.
		byte *new_end;
		uintptr needed;

		needed = (uintptr)h->arena_used + n - (uintptr)h->arena_end;
		needed = ROUND(needed, 256<<20);
		new_end = h->arena_end + needed;
		if(new_end <= h->arena_start + MaxArena32) {
			p = runtime·SysReserve(h->arena_end, new_end - h->arena_end);
			if(p == h->arena_end) {
				h->arena_end = new_end;
			}
		}
	}
	if(n <= h->arena_end - h->arena_used) {
		// Keep taking from our reservation.
		p = h->arena_used;
		runtime·SysMap(p, n, &mstats.heap_sys);
		h->arena_used += n;
		runtime·MHeap_MapBits(h);
		runtime·MHeap_MapSpans(h);
		if(raceenabled) {
			runtime·racemapshadow(p, n);
		}
		return p;
	}
	
	// If using 64-bit, our reservation is all we have.
	if(sizeof(void*) == 8 && (uintptr)h->bitmap >= 0xffffffffU) {
		return nil;
	}

	// On 32-bit, once the reservation is gone we can
	// try to get memory at a location chosen by the OS
	// and hope that it is in the range we allocated bitmap for.
	p = runtime·SysAlloc(n, &mstats.heap_sys);
	if(p == nil) {
		return nil;
	}

	if(p < h->arena_start || p+n - h->arena_start >= MaxArena32) {
		runtime·printf(
			"runtime: memory allocated by OS (%p) not in usable range [%p,%p)\n",
			p, h->arena_start, h->arena_start+MaxArena32
		);
		runtime·SysFree(p, n, &mstats.heap_sys);
		return nil;
	}

	if(p+n > h->arena_used) {
		h->arena_used = p+n;
		if(h->arena_used > h->arena_end) {
			h->arena_end = h->arena_used;
		}
		runtime·MHeap_MapBits(h);
		runtime·MHeap_MapSpans(h);
		if(raceenabled) {
			runtime·racemapshadow(p, n);
		}
	}
	
	return p;
}

static struct
{
	Lock;
	byte*	pos;
	byte*	end;
} persistent;

enum
{
	// 256k
	PersistentAllocChunk	= 256<<10,
	// 64k
	//
	// VM reservation granularity is 64K on windows
	PersistentAllocMaxBlock	= 64<<10,
};

// 为 function, type 等内置类型分配指定大小的空间, 并返回该块空间的地址.
//
// param size: 待分配的空间大小. 
//
// caller:
// 	1. src/pkg/runtime/mfixalloc.c -> runtime·FixAlloc_Alloc() 初始化内存分配器期间被调用.
//
// Wrapper around SysAlloc that can allocate small chunks.
// There is no associated free operation.
// Intended for things like function/type/debug-related persistent data.
// If align is 0, uses default align (currently 8).
void*
runtime·persistentalloc(uintptr size, uintptr align, uint64 *stat)
{
	byte *p;

	if(align != 0) {
		if(align&(align-1)) {
			runtime·throw("persistentalloc: align is now a power of 2");
		}
		if(align > PageSize) {
			runtime·throw("persistentalloc: align is too large");
		}
	} else{
		align = 8;
	}

	if(size >= PersistentAllocMaxBlock) {
		return runtime·SysAlloc(size, stat);
	}

	runtime·lock(&persistent);
	persistent.pos = (byte*)ROUND((uintptr)persistent.pos, align);
	if(persistent.pos + size > persistent.end) {
		persistent.pos = runtime·SysAlloc(PersistentAllocChunk, &mstats.other_sys);
		if(persistent.pos == nil) {
			runtime·unlock(&persistent);
			runtime·throw("runtime: cannot allocate memory");
		}
		persistent.end = persistent.pos + PersistentAllocChunk;
	}
	p = persistent.pos;
	persistent.pos += size;
	runtime·unlock(&persistent);

	if(stat != &mstats.other_sys) {
		// reaccount the allocation against provided stat
		runtime·xadd64(stat, size);
		runtime·xadd64(&mstats.other_sys, -(uint64)size);
	}
	return p;
}

static Lock settype_lock;

void
runtime·settype_flush(M *mp)
{
	uintptr *buf, *endbuf;
	uintptr size, ofs, j, t;
	uintptr ntypes, nbytes2, nbytes3;
	uintptr *data2;
	byte *data3;
	void *v;
	uintptr typ, p;
	MSpan *s;

	buf = mp->settype_buf;
	endbuf = buf + mp->settype_bufsize;

	runtime·lock(&settype_lock);
	while(buf < endbuf) {
		v = (void*)*buf;
		*buf = 0;
		buf++;
		typ = *buf;
		buf++;

		// (Manually inlined copy of runtime·MHeap_Lookup)
		p = (uintptr)v>>PageShift;
		if(sizeof(void*) == 8) {
			p -= (uintptr)runtime·mheap.arena_start >> PageShift;
		}
		s = runtime·mheap.spans[p];

		if(s->sizeclass == 0) {
			s->types.compression = MTypes_Single;
			s->types.data = typ;
			continue;
		}

		size = s->elemsize;
		ofs = ((uintptr)v - (s->start<<PageShift)) / size;

		switch(s->types.compression) {
		case MTypes_Empty:
			ntypes = (s->npages << PageShift) / size;
			nbytes3 = 8*sizeof(uintptr) + 1*ntypes;
			data3 = runtime·mallocgc(nbytes3, 0, FlagNoProfiling|FlagNoScan|FlagNoInvokeGC);
			s->types.compression = MTypes_Bytes;
			s->types.data = (uintptr)data3;
			((uintptr*)data3)[1] = typ;
			data3[8*sizeof(uintptr) + ofs] = 1;
			break;

		case MTypes_Words:
			((uintptr*)s->types.data)[ofs] = typ;
			break;

		case MTypes_Bytes:
			data3 = (byte*)s->types.data;
			for(j=1; j<8; j++) {
				if(((uintptr*)data3)[j] == typ) {
					break;
				}
				if(((uintptr*)data3)[j] == 0) {
					((uintptr*)data3)[j] = typ;
					break;
				}
			}
			if(j < 8) {
				data3[8*sizeof(uintptr) + ofs] = j;
			} else {
				ntypes = (s->npages << PageShift) / size;
				nbytes2 = ntypes * sizeof(uintptr);
				data2 = runtime·mallocgc(nbytes2, 0, FlagNoProfiling|FlagNoScan|FlagNoInvokeGC);
				s->types.compression = MTypes_Words;
				s->types.data = (uintptr)data2;

				// Move the contents of data3 to data2. Then deallocate data3.
				for(j=0; j<ntypes; j++) {
					t = data3[8*sizeof(uintptr) + j];
					t = ((uintptr*)data3)[t];
					data2[j] = t;
				}
				data2[ofs] = typ;
			}
			break;
		}
	}
	runtime·unlock(&settype_lock);

	mp->settype_bufsize = 0;
}

uintptr
runtime·gettype(void *v)
{
	MSpan *s;
	uintptr t, ofs;
	byte *data;

	s = runtime·MHeap_LookupMaybe(&runtime·mheap, v);
	if(s != nil) {
		t = 0;
		switch(s->types.compression) {
		case MTypes_Empty:
			break;
		case MTypes_Single:
			t = s->types.data;
			break;
		case MTypes_Words:
			ofs = (uintptr)v - (s->start<<PageShift);
			t = ((uintptr*)s->types.data)[ofs/s->elemsize];
			break;
		case MTypes_Bytes:
			ofs = (uintptr)v - (s->start<<PageShift);
			data = (byte*)s->types.data;
			t = data[8*sizeof(uintptr) + ofs/s->elemsize];
			t = ((uintptr*)data)[t];
			break;
		default:
			runtime·throw("runtime·gettype: invalid compression kind");
		}
		if(0) {
			runtime·lock(&settype_lock);
			runtime·printf("%p -> %d,%X\n", v, (int32)s->types.compression, (int64)t);
			runtime·unlock(&settype_lock);
		}
		return t;
	}
	return 0;
}

// Runtime stubs.

void*
runtime·mal(uintptr n)
{
	return runtime·mallocgc(n, 0, 0);
}

#pragma textflag NOSPLIT
void
runtime·new(Type *typ, uint8 *ret)
{
	// runtime·printf(
	// 	"runtime·new() type info -- size: %d, align: %d, kind: %d, string: %s\n", 
	// 	typ->size, typ->align, typ->kind, typ->string
	// );
	ret = runtime·mallocgc(typ->size, (uintptr)typ | TypeInfo_SingleObject, typ->kind&KindNoPointers ? FlagNoScan : 0);
	FLUSH(&ret);
}

static void*
cnew(Type *typ, intgo n, int32 objtyp)
{
	if((objtyp&(PtrSize-1)) != objtyp) {
		runtime·throw("runtime: invalid objtyp");
	}
	if(n < 0 || (typ->size > 0 && n > MaxMem/typ->size)) {
		runtime·panicstring("runtime: allocation size out of range");
	}
	return runtime·mallocgc(typ->size*n, (uintptr)typ | objtyp, typ->kind&KindNoPointers ? FlagNoScan : 0);
}

// 等同于 runtime·new(), 不过主调函数是 C 语言
// same as runtime·new, but callable from C
void*
runtime·cnew(Type *typ)
{
	return cnew(typ, 1, TypeInfo_SingleObject);
}

void*
runtime·cnewarray(Type *typ, intgo n)
{
	return cnew(typ, n, TypeInfo_Array);
}

// golang原生: runtime.GC() 函数, 由开发者手动触发 GC 行为.
func GC() {
	runtime·gc(1);
}

func SetFinalizer(obj Eface, finalizer Eface) {
	byte *base;
	uintptr size;
	FuncType *ft;
	int32 i;
	uintptr nret;
	Type *t;
	Type *fint;
	PtrType *ot;
	Iface iface;

	if(obj.type == nil) {
		runtime·printf("runtime.SetFinalizer: first argument is nil interface\n");
		goto throw;
	}
	if(obj.type->kind != KindPtr) {
		runtime·printf(
			"runtime.SetFinalizer: first argument is %S, not pointer\n", 
			*obj.type->string
		);
		goto throw;
	}
	if(!runtime·mlookup(obj.data, &base, &size, nil) || obj.data != base) {
		runtime·printf(
			"runtime.SetFinalizer: pointer not at beginning of allocated block\n"
		);
		goto throw;
	}
	nret = 0;
	ot = (PtrType*)obj.type;
	fint = nil;
	if(finalizer.type != nil) {
		if(finalizer.type->kind != KindFunc) {
			goto badfunc;
		}
		ft = (FuncType*)finalizer.type;
		if(ft->dotdotdot || ft->in.len != 1) {
			goto badfunc;
		}
		fint = *(Type**)ft->in.array;
		if(fint == obj.type) {
			// ok - same type
		} else if(fint->kind == KindPtr && (fint->x == nil || fint->x->name == nil || obj.type->x == nil || obj.type->x->name == nil) && ((PtrType*)fint)->elem == ((PtrType*)obj.type)->elem) {
			// ok - not same type, but both pointers,
			// one or the other is unnamed, and same element type, so assignable.
		} else if(fint->kind == KindInterface && ((InterfaceType*)fint)->mhdr.len == 0) {
			// ok - satisfies empty interface
		} else if(fint->kind == KindInterface && runtime·ifaceE2I2((InterfaceType*)fint, obj, &iface)) {
			// ok - satisfies non-empty interface
		} else {
			goto badfunc;
		}

		// compute size needed for return parameters
		for(i=0; i<ft->out.len; i++) {
			t = ((Type**)ft->out.array)[i];
			nret = ROUND(nret, t->align) + t->size;
		}
		nret = ROUND(nret, sizeof(void*));
	}
	
	if(!runtime·addfinalizer(obj.data, finalizer.data, nret, fint, ot)) {
		runtime·printf("runtime.SetFinalizer: finalizer already set\n");
		goto throw;
	}
	return;

badfunc:
	runtime·printf("runtime.SetFinalizer: cannot pass %S to finalizer %S\n", *obj.type->string, *finalizer.type->string);
throw:
	runtime·throw("runtime.SetFinalizer");
}
